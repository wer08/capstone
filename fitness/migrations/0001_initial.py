# Generated by Django 4.1.3 on 2022-12-12 09:28

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('calories', models.IntegerField(default=2000)),
                ('protein', models.IntegerField(default=400)),
                ('carbs', models.IntegerField(default=1000)),
                ('fat', models.IntegerField(default=600)),
                ('profile_pic', models.ImageField(default='media/pobrane.png', upload_to='media')),
                ('daily_calories', models.IntegerField(default=2000)),
                ('subscribed', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Exercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('target_muscle', models.CharField(choices=[('Chest', 'Chest'), ('Legs', 'Legs'), ('Back', 'Back'), ('Biceps', 'Biceps'), ('Triceps', 'Triceps'), ('Abs', 'Abs')], max_length=100)),
                ('rounds', models.IntegerField(default=3)),
                ('reps', models.IntegerField(default=8)),
                ('type', models.CharField(choices=[('Gym', 'Gym'), ('Home', 'Home')], default='Gym', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Meal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('calorie', models.IntegerField()),
                ('type', models.CharField(choices=[('BR', 'Breakfast'), ('DIN', 'Dinner'), ('LU', 'Lunch'), ('SN', 'Snack')], max_length=20)),
                ('ingredients', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=20), blank=True, size=None)),
                ('description', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Routine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('days_per_week', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7)])),
                ('gym', models.BooleanField()),
                ('hypertrophy', models.BooleanField()),
                ('weight_loss', models.BooleanField()),
                ('trainings', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, size=None)),
            ],
        ),
        migrations.CreateModel(
            name='Sport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('calories_per_minute', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Workout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Random workout', max_length=100)),
                ('exercises', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, size=None)),
                ('gym', models.BooleanField(default=True)),
                ('hypertrophy', models.BooleanField(default=True)),
                ('weight_loss', models.BooleanField(default=True)),
                ('calories_burned', models.IntegerField(default=500)),
                ('type', models.CharField(choices=[('Gym', 'Gym'), ('Home', 'Home')], default='Gym', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.CharField(max_length=100)),
                ('comments', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), null=True, size=None)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Diet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_meal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='first_meals', to='fitness.meal')),
                ('second_meal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='second_meals', to='fitness.meal')),
                ('snack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='snacks', to='fitness.meal')),
                ('third_meal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='third_meals', to='fitness.meal')),
            ],
        ),
        migrations.CreateModel(
            name='Daily',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily_balance', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), null=True, size=None)),
                ('daily_breakfast', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='daily_breakfast', to='fitness.meal')),
                ('daily_dinner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='daily_dinner', to='fitness.meal')),
                ('daily_lunch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='daily_lunch', to='fitness.meal')),
                ('daily_snack', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='daily_snack', to='fitness.meal')),
                ('person', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='daily', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.CharField(max_length=100)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='fitness.post')),
            ],
        ),
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_created=True)),
                ('calories_left', models.IntegerField(default=2000)),
                ('day_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='date', to='fitness.daily')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calendar', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='routine',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='fitness.routine'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
